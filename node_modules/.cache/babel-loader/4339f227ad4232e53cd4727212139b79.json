{"remainingRequest":"/Users/yashsah/Downloads/simple-vuejs-app/node_modules/babel-loader/lib/index.js!/Users/yashsah/Downloads/simple-vuejs-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/yashsah/Downloads/simple-vuejs-app/src/views/CustomerDetails.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/yashsah/Downloads/simple-vuejs-app/src/views/CustomerDetails.vue","mtime":1705201187908},{"path":"/Users/yashsah/Downloads/simple-vuejs-app/node_modules/cache-loader/dist/cjs.js","mtime":1705122652837},{"path":"/Users/yashsah/Downloads/simple-vuejs-app/node_modules/babel-loader/lib/index.js","mtime":1705122653611},{"path":"/Users/yashsah/Downloads/simple-vuejs-app/node_modules/vue-loader/lib/index.js","mtime":1705122653159}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/yashsah/Downloads/simple-vuejs-app/node_modules/@babel/runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      weather: null,\n      showDetails: false\n    };\n  },\n  mounted: function mounted() {\n    this.getLocation();\n  },\n  methods: {\n    getLocation: function () {\n      var _getLocation = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  // Get user's geolocation\n                  navigator.geolocation.getCurrentPosition(function (position) {\n                    var _position$coords = position.coords,\n                        latitude = _position$coords.latitude,\n                        longitude = _position$coords.longitude;\n\n                    _this.fetchWeather(latitude, longitude);\n                  }, function (error) {\n                    console.error('Error getting geolocation:', error);\n                  });\n                } catch (error) {\n                  console.error('Error getting geolocation:', error);\n                }\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function getLocation() {\n        return _getLocation.apply(this, arguments);\n      };\n    }(),\n    fetchWeather: function () {\n      var _fetchWeather = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.$axios.get('https://api.tomorrow.io/v4/weather/forecast?location=Boston&apikey=BxEPGLMrgy2xUBYzFmcMnkRTke0Gv0og', {});\n\n              case 3:\n                response = _context2.sent;\n                this.weather = {\n                  temperature: response.data.timelines.minutely[0].values.temperature,\n                  description: response.data.timelines.minutely[0].values.weatherCode,\n                  humidity: response.data.timelines.minutely[0].values.humidity,\n                  visibility: response.data.timelines.minutely[0].values.visibility\n                };\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.error('Error fetching weather:', _context2.t0.response || _context2.t0.message || _context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n\n      return function fetchWeather() {\n        return _fetchWeather.apply(this, arguments);\n      };\n    }()\n  }\n};",{"version":3,"sources":["CustomerDetails.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAmBA,eAAA;AACA,MADA,kBACA;AACA,WAAA;AACA,eAAA,IADA;AAEA,mBAAA;AAFA,KAAA;AAIA,GANA;AAOA,SAPA,qBAOA;AACA,SAAA,WAAA;AACA,GATA;AAUA,WAAA;AACA,eADA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAA;AACA;AACA,4BAAA,WAAA,CAAA,kBAAA,CACA,UAAA,QAAA,EAAA;AAAA,2CACA,SAAA,MADA;AAAA,wBACA,QADA,oBACA,QADA;AAAA,wBACA,SADA,oBACA,SADA;;AAEA,0BAAA,YAAA,CAAA,QAAA,EAAA,SAAA;AACA,mBAJA,EAKA,UAAA,KAAA,EAAA;AACA,4BAAA,KAAA,CAAA,4BAAA,EAAA,KAAA;AACA,mBAPA;AASA,iBAXA,CAWA,OAAA,KAAA,EAAA;AACA,0BAAA,KAAA,CAAA,4BAAA,EAAA,KAAA;AACA;;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAiBA,gBAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAmBA,KAAA,MAAA,CAAA,GAAA,CAAA,qGAAA,EAAA,EAAA,CAnBA;;AAAA;AAmBA,wBAnBA;AAqBA,qBAAA,OAAA,GAAA;AACA,+BAAA,SAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA,WADA;AAEA,+BAAA,SAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA,WAFA;AAGA,4BAAA,SAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA,QAHA;AAIA,8BAAA,SAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,EAAA,MAAA,CAAA;AAJA,iBAAA;AArBA;AAAA;;AAAA;AAAA;AAAA;AA4BA,wBAAA,KAAA,CAAA,yBAAA,EAAA,aAAA,QAAA,IAAA,aAAA,OAAA,gBAAA;;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA,CAAA","sourcesContent":["<template>\n    <div>\n      <h2>Weather Widget</h2>\n      <div v-if=\"weather\" @mouseover=\"showDetails = true\" @mouseout=\"showDetails = false\">\n        <p>Weather Code: {{ weather.description }}</p>\n        <p>Temperature: {{ weather.temperature }}Â°C</p>\n        <p style=\"color: blue;font-style: italic;\" v-if=\"showDetails\">Extra Information: <br>\n            Humidity: {{ weather.humidity }} <br>\n            Visibility: {{ weather.visibility }}\n        </p>\n        \n      </div>\n      \n\n      <p v-else>Loading weather...</p>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    data() {\n      return {\n        weather: null,\n        showDetails:false,\n      };\n    },\n    mounted() {\n      this.getLocation();\n    },\n    methods: {\n      async getLocation() {\n        try {\n          // Get user's geolocation\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const { latitude, longitude } = position.coords;\n              this.fetchWeather(latitude, longitude);\n            },\n            (error) => {\n              console.error('Error getting geolocation:', error);\n            }\n          );\n        } catch (error) {\n          console.error('Error getting geolocation:', error);\n        }\n      },\n      async fetchWeather() {\n        try {\n          const response = await this.$axios.get('https://api.tomorrow.io/v4/weather/forecast?location=Boston&apikey=BxEPGLMrgy2xUBYzFmcMnkRTke0Gv0og', {\n          });\n          this.weather = {\n            temperature: response.data.timelines.minutely[0].values.temperature,\n            description: response.data.timelines.minutely[0].values.weatherCode,\n            humidity: response.data.timelines.minutely[0].values.humidity,\n            visibility:response.data.timelines.minutely[0].values.visibility,\n          };\n        } catch (error) {\n          console.error('Error fetching weather:', error.response || error.message || error);\n        }\n      },\n    },\n  };\n  </script>"],"sourceRoot":"src/views"}]}